name: Deploy

on:
  push:
    branches: [main]
    paths:
      - 'apps/api/**/*'

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '21.7.x'

      - uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false

      - name: Enable corepack
        shell: bash
        run: corepack enable

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install deps
        shell: bash
        run: |
          pnpm install --recursive

      - name: Lint
        run: pnpm turbo run lint --filter='./apps/api'
  deploy:
    needs:
      - lint
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '21.7.x'

      - uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false

      - name: Enable corepack
        shell: bash
        run: corepack enable

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install deps
        shell: bash
        run: |
          pnpm install --recursive
          npm i -g wrangler

      - name: Build
        run: pnpm turbo run build --filter='./apps/api'

      - name: Cloudflare
        run: wrangler deploy --env=production
        working-directory: './apps/api'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
